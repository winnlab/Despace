// Generated by CoffeeScript 1.8.0
(function() {
  var Files, Logger, Model, View, async, fs, setFail, uploadPath, _;

  async = require('async');

  fs = require('fs');

  View = require('../../lib/view');

  Files = require('../../lib/files');

  Model = require('../../lib/model');

  Logger = require('../../lib/logger');

  _ = require('underscore');

  uploadPath = './uploads/';

  setFail = function(err, res) {
    var msg;
    msg = "Error in " + __filename + ": " + (err.message || err);
    Logger.log('error', msg);
    return View.clientFail(err, res);
  };

  exports.findAll = function(req, res) {
    var query;
    query = req.query ? req.query : {};
    return async.waterfall([
      function(next) {
        return Model('Project', 'find', next, query, null, {
          sort: 'position'
        });
      }, function(projects) {
        return View.clientSuccess({
          projects: projects
        }, res);
      }
    ], function(err) {
      return setFail(err, res);
    });
  };

  exports.save = function(req, res) {
    var data, _id;
    data = req.body;
    _id = data._id;
    return async.waterfall([
      function(next) {
        if (_id) {
          return Model('Project', 'findOne', next, {
            _id: _id
          });
        } else {
          return next(null, null);
        }
      }, function(project, next) {
        if (project) {
          project = Document.setDocumentData(project, data);
          return project.save(next);
        } else {
          return Model('Project', 'create', next, data);
        }
      }, function(project) {
        return View.clientSuccess({
          _id: project._id
        }, res);
      }
    ], function(err) {
      return setFail(err, res);
    });
  };

  exports["delete"] = function(req, res) {
    var _id;
    _id = req.params.id;
    return async.waterfall([
      function(next) {
        return Model('Project', 'findOne', next, {
          _id: _id
        });
      }, function(doc, next) {
        if (doc) {
          return Files.unlinkArray(doc.img, uploadPath, function(err) {
            return next(err, doc);
          });
        } else {
          return next("Проект который Вы хотите удалить не существует.");
        }
      }, function(doc, next) {
        return doc.remove(next);
      }, function(next) {
        return View.clientSuccess('Проект успешно удален!', res);
      }
    ], function(err) {
      return setFail(err, res);
    });
  };

  exports.imgSave = function(req, res) {
    var imgName, _id;
    _id = req.body.id;
    imgName = req.body.name;
    return async.waterfall([
      function(next) {
        return Model('Project', 'findById', next, _id);
      }, function(project, next) {
        if (req.files != null) {
          if (Array.isArray(req.files[imgName])) {
            req.files[imgName].forEach(function(val) {
              return project.img.push(val.name);
            });
          } else {
            project.img.push(req.files[imgName].name);
          }
        }
        return project.save(next);
      }, function(doc) {
        return View.clientSuccess({
          name: req.files[imgName]
        }, res);
      }
    ], function(err) {
      return setFail(err, res);
    });
  };

  exports.imgDelete = function(req, res) {
    var sourceName, _id;
    _id = req.body.id;
    sourceName = req.body.sourceName;
    return async.waterfall([
      function(next) {
        return Model('Project', 'findOne', next, {
          _id: _id
        });
      }, function(project, next) {
        var index, _ref;
        index = project.img.indexOf(sourceName);
        return fs.unlink(uploadPath + (project != null ? (_ref = project.img) != null ? _ref[index] : void 0 : void 0), function(err) {
          return next(err, project, index);
        });
      }, function(project, index, next) {
        project.img.splice(index, 1);
        return project.save(next);
      }, function(doc, numberAffected) {
        return View.clientSuccess('Картинка успешно удалена', res);
      }
    ], function(err) {
      return setFail(err, res);
    });
  };

}).call(this);

//# sourceMappingURL=projects.js.map
